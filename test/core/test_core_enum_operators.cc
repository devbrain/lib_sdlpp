/**
 * @file test_core_enum_operators.cc
 * @brief Unit tests for enum stream operators
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <doctest/doctest.h>
#include <../include/sdlpp/system/power_state.hh>
#include <sstream>
#include <string>

TEST_SUITE("core_enum_operators") {

    TEST_CASE("power_state stream operators") {
        SUBCASE("operator<< outputs correct string representation") {
            std::ostringstream oss;
            oss << sdlpp::power_state::unknown;
            CHECK(oss.str() == "unknown");
            oss.str("");
            oss << sdlpp::power_state::on_battery;
            CHECK(oss.str() == "on_battery");
            oss.str("");
            oss << sdlpp::power_state::no_battery;
            CHECK(oss.str() == "no_battery");
            oss.str("");
        }

        SUBCASE("operator>> parses string correctly") {
            std::istringstream iss;
            sdlpp::power_state value;
            iss.str("unknown");
            iss >> value;
            CHECK(value == sdlpp::power_state::unknown);
            iss.clear();
            iss.str("on_battery");
            iss >> value;
            CHECK(value == sdlpp::power_state::on_battery);
            iss.clear();
            iss.str("no_battery");
            iss >> value;
            CHECK(value == sdlpp::power_state::no_battery);
            iss.clear();

            // Test integer parsing
            iss.str("0");
            iss >> value;
            CHECK(static_cast<int>(value) == 0);
        }

        SUBCASE("round-trip conversion works") {
            std::stringstream ss;
            sdlpp::power_state original = sdlpp::power_state::unknown;
            sdlpp::power_state result;

            ss << original;
            ss >> result;

            CHECK(result == original);
        }
    }
}