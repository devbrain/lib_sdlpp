/**
 * @file test_ui_enum_operators.cc
 * @brief Unit tests for enum stream operators
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <doctest/doctest.h>
#include <sdlpp/ui/tray.hh>
#include <sstream>
#include <string>

TEST_SUITE("ui_enum_operators") {

    TEST_CASE("tray_entry_flags stream operators") {
        SUBCASE("operator<< outputs correct string representation") {
            std::ostringstream oss;
            oss << static_cast<sdlpp::tray_entry_flags>(0);
            CHECK(oss.str() == "none");
            oss.str("");
            oss << std::hex << static_cast<sdlpp::tray_entry_flags>(0x5) << std::dec;
            CHECK(oss.str() == "5");
            oss.str("");
        }

        SUBCASE("operator>> parses string correctly") {
            std::istringstream iss;
            sdlpp::tray_entry_flags value;
            iss.str("checked");
            iss >> value;
            CHECK(value == sdlpp::tray_entry_flags::checked);
            iss.clear();
            iss.str("disabled");
            iss >> value;
            CHECK(value == sdlpp::tray_entry_flags::disabled);
            iss.clear();

            // Test parsing multiple flags
            iss.str("checked | disabled");
            iss >> value;
            CHECK((static_cast<unsigned int>(value) & static_cast<unsigned int>(sdlpp::tray_entry_flags::checked)) != 0);
            CHECK((static_cast<unsigned int>(value) & static_cast<unsigned int>(sdlpp::tray_entry_flags::disabled)) != 0);
            iss.clear();

            // Test hex parsing with 0x prefix
            iss.str("0xFF");
            iss >> value;
            CHECK(static_cast<unsigned int>(value) == 0xFF);
            iss.clear();

            // Test hex parsing with stream flag
            iss.str("FF");
            iss >> std::hex >> value >> std::dec;
            CHECK(static_cast<unsigned int>(value) == 0xFF);
        }

        SUBCASE("round-trip conversion works") {
            // Flags enum - test with multiple flags
            std::stringstream ss;
            sdlpp::tray_entry_flags original = static_cast<sdlpp::tray_entry_flags>(
                static_cast<unsigned int>(sdlpp::tray_entry_flags::checked) |
                static_cast<unsigned int>(sdlpp::tray_entry_flags::disabled)
            );


            // Output will be human-readable flag names
            ss << original;
            std::string output = ss.str();
            CHECK(output.find("checked") != std::string::npos);
            CHECK(output.find("disabled") != std::string::npos);
            CHECK(output.find(" | ") != std::string::npos);
        }
    }
}