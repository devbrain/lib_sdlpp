/**
 * @file test_system_enum_operators.cc
 * @brief Unit tests for enum stream operators
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <doctest/doctest.h>
#include <sdlpp/system/process.hh>
#include <sstream>
#include <string>

TEST_SUITE("system_enum_operators") {

    TEST_CASE("process_io stream operators") {
        SUBCASE("operator<< outputs correct string representation") {
            std::ostringstream oss;
            oss << sdlpp::process_io::inherited;
            CHECK(oss.str() == "inherited");
            oss.str("");
            oss << sdlpp::process_io::null;
            CHECK(oss.str() == "null");
            oss.str("");
            oss << sdlpp::process_io::app;
            CHECK(oss.str() == "app");
            oss.str("");
        }

        SUBCASE("operator>> parses string correctly") {
            std::istringstream iss;
            sdlpp::process_io value;
            iss.str("inherited");
            iss >> value;
            CHECK(value == sdlpp::process_io::inherited);
            iss.clear();
            iss.str("null");
            iss >> value;
            CHECK(value == sdlpp::process_io::null);
            iss.clear();
            iss.str("app");
            iss >> value;
            CHECK(value == sdlpp::process_io::app);
            iss.clear();

            // Test integer parsing
            iss.str("0");
            iss >> value;
            CHECK(value == sdlpp::process_io::inherited);
        }

        SUBCASE("round-trip conversion works") {
            std::stringstream ss;
            sdlpp::process_io original = sdlpp::process_io::inherited;
            sdlpp::process_io result;

            ss << original;
            ss >> result;

            CHECK(result == original);
        }
    }
}