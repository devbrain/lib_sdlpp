/**
 * @file test_input_enum_operators.cc
 * @brief Unit tests for enum stream operators
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <doctest/doctest.h>
#include <sdlpp/input/touch.hh>
#include <sstream>
#include <string>

TEST_SUITE("input_enum_operators") {

    TEST_CASE("touch_device_type stream operators") {
        SUBCASE("operator<< outputs correct string representation") {
            std::ostringstream oss;
            oss << sdlpp::touch_device_type::invalid;
            CHECK(oss.str() == "invalid");
            oss.str("");
            oss << sdlpp::touch_device_type::direct;
            CHECK(oss.str() == "direct");
            oss.str("");
            oss << sdlpp::touch_device_type::indirect_absolute;
            CHECK(oss.str() == "indirect_absolute");
            oss.str("");
        }

        SUBCASE("operator>> parses string correctly") {
            std::istringstream iss;
            sdlpp::touch_device_type value;
            iss.str("invalid");
            iss >> value;
            CHECK(value == sdlpp::touch_device_type::invalid);
            iss.clear();
            iss.str("direct");
            iss >> value;
            CHECK(value == sdlpp::touch_device_type::direct);
            iss.clear();
            iss.str("indirect_absolute");
            iss >> value;
            CHECK(value == sdlpp::touch_device_type::indirect_absolute);
            iss.clear();

            // Test integer parsing
            iss.str("0");
            iss >> value;
            CHECK(static_cast<int>(value) == 0);
        }

        SUBCASE("round-trip conversion works") {
            std::stringstream ss;
            sdlpp::touch_device_type original = sdlpp::touch_device_type::invalid;
            sdlpp::touch_device_type result;

            ss << original;
            ss >> result;

            CHECK(result == original);
        }
    }
}