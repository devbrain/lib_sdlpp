/**
 * @file pixels.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/video/pixels.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, pixel_format_enum value) {
        switch (value) {
            case pixel_format_enum::unknown:
                return os << "unknown";
            case pixel_format_enum::INDEX1LSB:
                return os << "INDEX1LSB";
            case pixel_format_enum::INDEX1MSB:
                return os << "INDEX1MSB";
            case pixel_format_enum::INDEX4LSB:
                return os << "INDEX4LSB";
            case pixel_format_enum::INDEX4MSB:
                return os << "INDEX4MSB";
            case pixel_format_enum::INDEX8:
                return os << "INDEX8";
            case pixel_format_enum::RGB332:
                return os << "RGB332";
            case pixel_format_enum::RGB444:
                return os << "RGB444";
            case pixel_format_enum::RGB555:
                return os << "RGB555";
            case pixel_format_enum::BGR555:
                return os << "BGR555";
            case pixel_format_enum::ARGB4444:
                return os << "ARGB4444";
            case pixel_format_enum::RGBA4444:
                return os << "RGBA4444";
            case pixel_format_enum::ABGR4444:
                return os << "ABGR4444";
            case pixel_format_enum::BGRA4444:
                return os << "BGRA4444";
            case pixel_format_enum::ARGB1555:
                return os << "ARGB1555";
            case pixel_format_enum::RGBA5551:
                return os << "RGBA5551";
            case pixel_format_enum::ABGR1555:
                return os << "ABGR1555";
            case pixel_format_enum::BGRA5551:
                return os << "BGRA5551";
            case pixel_format_enum::RGB565:
                return os << "RGB565";
            case pixel_format_enum::BGR565:
                return os << "BGR565";
            case pixel_format_enum::RGB24:
                return os << "RGB24";
            case pixel_format_enum::BGR24:
                return os << "BGR24";
            case pixel_format_enum::RGB888:
                return os << "RGB888";
            case pixel_format_enum::RGBX8888:
                return os << "RGBX8888";
            case pixel_format_enum::BGR888:
                return os << "BGR888";
            case pixel_format_enum::BGRX8888:
                return os << "BGRX8888";
            case pixel_format_enum::ARGB8888:
                return os << "ARGB8888";
            case pixel_format_enum::RGBA8888:
                return os << "RGBA8888";
            case pixel_format_enum::ABGR8888:
                return os << "ABGR8888";
            case pixel_format_enum::BGRA8888:
                return os << "BGRA8888";
            case pixel_format_enum::ARGB2101010:
                return os << "ARGB2101010";
            default:
                return os << "Unknown_pixel_format_enum(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, pixel_format_enum& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <pixel_format_enum>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "unknown") {
            value = pixel_format_enum::unknown;
        } else if (str == "index1lsb") {
            value = pixel_format_enum::INDEX1LSB;
        } else if (str == "index1msb") {
            value = pixel_format_enum::INDEX1MSB;
        } else if (str == "index4lsb") {
            value = pixel_format_enum::INDEX4LSB;
        } else if (str == "index4msb") {
            value = pixel_format_enum::INDEX4MSB;
        } else if (str == "index8") {
            value = pixel_format_enum::INDEX8;
        } else if (str == "rgb332") {
            value = pixel_format_enum::RGB332;
        } else if (str == "rgb444") {
            value = pixel_format_enum::RGB444;
        } else if (str == "rgb555") {
            value = pixel_format_enum::RGB555;
        } else if (str == "bgr555") {
            value = pixel_format_enum::BGR555;
        } else if (str == "argb4444") {
            value = pixel_format_enum::ARGB4444;
        } else if (str == "rgba4444") {
            value = pixel_format_enum::RGBA4444;
        } else if (str == "abgr4444") {
            value = pixel_format_enum::ABGR4444;
        } else if (str == "bgra4444") {
            value = pixel_format_enum::BGRA4444;
        } else if (str == "argb1555") {
            value = pixel_format_enum::ARGB1555;
        } else if (str == "rgba5551") {
            value = pixel_format_enum::RGBA5551;
        } else if (str == "abgr1555") {
            value = pixel_format_enum::ABGR1555;
        } else if (str == "bgra5551") {
            value = pixel_format_enum::BGRA5551;
        } else if (str == "rgb565") {
            value = pixel_format_enum::RGB565;
        } else if (str == "bgr565") {
            value = pixel_format_enum::BGR565;
        } else if (str == "rgb24") {
            value = pixel_format_enum::RGB24;
        } else if (str == "bgr24") {
            value = pixel_format_enum::BGR24;
        } else if (str == "rgb888") {
            value = pixel_format_enum::RGB888;
        } else if (str == "rgbx8888") {
            value = pixel_format_enum::RGBX8888;
        } else if (str == "bgr888") {
            value = pixel_format_enum::BGR888;
        } else if (str == "bgrx8888") {
            value = pixel_format_enum::BGRX8888;
        } else if (str == "argb8888") {
            value = pixel_format_enum::ARGB8888;
        } else if (str == "rgba8888") {
            value = pixel_format_enum::RGBA8888;
        } else if (str == "abgr8888") {
            value = pixel_format_enum::ABGR8888;
        } else if (str == "bgra8888") {
            value = pixel_format_enum::BGRA8888;
        } else if (str == "argb2101010") {
            value = pixel_format_enum::ARGB2101010;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <pixel_format_enum>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
