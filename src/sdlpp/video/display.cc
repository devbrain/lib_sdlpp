/**
 * @file display.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/video/display.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, display_orientation value) {
        switch (value) {
            case display_orientation::unknown:
                return os << "unknown";
            case display_orientation::landscape:
                return os << "landscape";
            case display_orientation::landscape_flipped:
                return os << "landscape_flipped";
            case display_orientation::portrait:
                return os << "portrait";
            case display_orientation::portrait_flipped:
                return os << "portrait_flipped";
            default:
                return os << "Unknown_display_orientation(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, display_orientation& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <display_orientation>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "unknown") {
            value = display_orientation::unknown;
        } else if (str == "landscape") {
            value = display_orientation::landscape;
        } else if (str == "landscape_flipped") {
            value = display_orientation::landscape_flipped;
        } else if (str == "portrait") {
            value = display_orientation::portrait;
        } else if (str == "portrait_flipped") {
            value = display_orientation::portrait_flipped;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <display_orientation>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }

    std::ostream& operator<<(std::ostream& os, system_theme value) {
        switch (value) {
            case system_theme::unknown:
                return os << "unknown";
            case system_theme::light:
                return os << "light";
            case system_theme::dark:
                return os << "dark";
            default:
                return os << "Unknown_system_theme(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, system_theme& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <system_theme>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "unknown") {
            value = system_theme::unknown;
        } else if (str == "light") {
            value = system_theme::light;
        } else if (str == "dark") {
            value = system_theme::dark;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <system_theme>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
