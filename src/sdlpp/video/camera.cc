/**
 * @file camera.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/video/camera.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, camera_position value) {
        switch (value) {
            case camera_position::unknown:
                return os << "unknown";
            case camera_position::front_facing:
                return os << "front_facing";
            case camera_position::back_facing:
                return os << "back_facing";
            default:
                return os << "Unknown_camera_position(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, camera_position& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <camera_position>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "unknown") {
            value = camera_position::unknown;
        } else if (str == "front_facing") {
            value = camera_position::front_facing;
        } else if (str == "back_facing") {
            value = camera_position::back_facing;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <camera_position>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
