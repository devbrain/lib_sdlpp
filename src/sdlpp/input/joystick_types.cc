/**
 * @file joystick_types.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/input/joystick_types.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, joystick_hat value) {
        switch (value) {
            case joystick_hat::centered:
                return os << "centered";
            case joystick_hat::up:
                return os << "up";
            case joystick_hat::right:
                return os << "right";
            case joystick_hat::down:
                return os << "down";
            case joystick_hat::left:
                return os << "left";
            case joystick_hat::rightup:
                return os << "rightup";
            case joystick_hat::rightdown:
                return os << "rightdown";
            case joystick_hat::leftup:
                return os << "leftup";
            case joystick_hat::leftdown:
                return os << "leftdown";
            default:
                return os << "Unknown_joystick_hat(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, joystick_hat& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <joystick_hat>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "centered") {
            value = joystick_hat::centered;
        } else if (str == "up") {
            value = joystick_hat::up;
        } else if (str == "right") {
            value = joystick_hat::right;
        } else if (str == "down") {
            value = joystick_hat::down;
        } else if (str == "left") {
            value = joystick_hat::left;
        } else if (str == "rightup") {
            value = joystick_hat::rightup;
        } else if (str == "rightdown") {
            value = joystick_hat::rightdown;
        } else if (str == "leftup") {
            value = joystick_hat::leftup;
        } else if (str == "leftdown") {
            value = joystick_hat::leftdown;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <joystick_hat>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
