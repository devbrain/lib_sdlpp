/**
 * @file hidapi.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/input/hidapi.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, hid_bus_type value) {
        switch (value) {
            case hid_bus_type::unknown:
                return os << "unknown";
            case hid_bus_type::usb:
                return os << "usb";
            case hid_bus_type::bluetooth:
                return os << "bluetooth";
            case hid_bus_type::i2c:
                return os << "i2c";
            case hid_bus_type::spi:
                return os << "spi";
            default:
                return os << "Unknown_hid_bus_type(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, hid_bus_type& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned long long_value = std::stoul(str, nullptr, 16);
                value = static_cast <hid_bus_type>(static_cast <unsigned int>(long_value));
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "unknown") {
            value = hid_bus_type::unknown;
        } else if (str == "usb") {
            value = hid_bus_type::usb;
        } else if (str == "bluetooth") {
            value = hid_bus_type::bluetooth;
        } else if (str == "i2c") {
            value = hid_bus_type::i2c;
        } else if (str == "spi") {
            value = hid_bus_type::spi;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <hid_bus_type>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace sdlpp
