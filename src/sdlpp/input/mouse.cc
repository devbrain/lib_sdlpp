/**
 * @file mouse.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/input/mouse.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, system_cursor value) {
        switch (value) {
            case system_cursor::default_cursor:
                return os << "default_cursor";
            case system_cursor::text:
                return os << "text";
            case system_cursor::wait:
                return os << "wait";
            case system_cursor::crosshair:
                return os << "crosshair";
            case system_cursor::progress:
                return os << "progress";
            case system_cursor::nwse_resize:
                return os << "nwse_resize";
            case system_cursor::nesw_resize:
                return os << "nesw_resize";
            case system_cursor::ew_resize:
                return os << "ew_resize";
            case system_cursor::ns_resize:
                return os << "ns_resize";
            case system_cursor::move:
                return os << "move";
            case system_cursor::not_allowed:
                return os << "not_allowed";
            case system_cursor::pointer:
                return os << "pointer";
            case system_cursor::nw_resize:
                return os << "nw_resize";
            case system_cursor::n_resize:
                return os << "n_resize";
            case system_cursor::ne_resize:
                return os << "ne_resize";
            case system_cursor::e_resize:
                return os << "e_resize";
            case system_cursor::se_resize:
                return os << "se_resize";
            case system_cursor::s_resize:
                return os << "s_resize";
            case system_cursor::sw_resize:
                return os << "sw_resize";
            case system_cursor::w_resize:
                return os << "w_resize";
            default:
                return os << "Unknown_system_cursor(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, system_cursor& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <system_cursor>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "default_cursor") {
            value = system_cursor::default_cursor;
        } else if (str == "text") {
            value = system_cursor::text;
        } else if (str == "wait") {
            value = system_cursor::wait;
        } else if (str == "crosshair") {
            value = system_cursor::crosshair;
        } else if (str == "progress") {
            value = system_cursor::progress;
        } else if (str == "nwse_resize") {
            value = system_cursor::nwse_resize;
        } else if (str == "nesw_resize") {
            value = system_cursor::nesw_resize;
        } else if (str == "ew_resize") {
            value = system_cursor::ew_resize;
        } else if (str == "ns_resize") {
            value = system_cursor::ns_resize;
        } else if (str == "move") {
            value = system_cursor::move;
        } else if (str == "not_allowed") {
            value = system_cursor::not_allowed;
        } else if (str == "pointer") {
            value = system_cursor::pointer;
        } else if (str == "nw_resize") {
            value = system_cursor::nw_resize;
        } else if (str == "n_resize") {
            value = system_cursor::n_resize;
        } else if (str == "ne_resize") {
            value = system_cursor::ne_resize;
        } else if (str == "e_resize") {
            value = system_cursor::e_resize;
        } else if (str == "se_resize") {
            value = system_cursor::se_resize;
        } else if (str == "s_resize") {
            value = system_cursor::s_resize;
        } else if (str == "sw_resize") {
            value = system_cursor::sw_resize;
        } else if (str == "w_resize") {
            value = system_cursor::w_resize;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <system_cursor>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
