/**
 * @file message_box.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/ui/message_box.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>
#include <vector>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, message_box_flags value) {
        // Check if hex output is requested
        if (os.flags() & std::ios::hex) {
            // Output as hex value
            os << static_cast <unsigned int>(value);
            return os;
        }

        // Output as human-readable flag names
        std::vector <std::string> active_flags;

        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(message_box_flags::error)) != 0) {
            active_flags.emplace_back("error");
        }
        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(message_box_flags::warning)) != 0) {
            active_flags.emplace_back("warning");
        }
        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(message_box_flags::information)) != 0) {
            active_flags.emplace_back("information");
        }

        // Sort flags lexicographically
        std::sort(active_flags.begin(), active_flags.end());

        if (active_flags.empty()) {
            os << "none";
        } else {
            bool first = true;
            for (const auto& flag : active_flags) {
                if (!first) os << " | ";
                os << flag;
                first = false;
            }
        }
        return os;
    }

    std::istream& operator>>(std::istream& is, message_box_flags& value) {
        std::string str;
        is >> str;

        value = static_cast <message_box_flags>(0);

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <message_box_flags>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Check for explicit hex format (0x...)
        if (str.substr(0, 2) == "0x" || str.substr(0, 2) == "0X") {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <message_box_flags>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Parse as flag names separated by |
        size_t start = 0;
        size_t pos = 0;

        while (start < str.length()) {
            pos = str.find('|', start);
            std::string flag_name = (pos == std::string::npos) ? str.substr(start) : str.substr(start, pos - start);

            // Trim whitespace
            size_t first = flag_name.find_first_not_of(' ');
            size_t last = flag_name.find_last_not_of(' ');
            if (first != std::string::npos && last != std::string::npos) {
                flag_name = flag_name.substr(first, last - first + 1);
            }

            // Convert to lowercase
            std::transform(flag_name.begin(), flag_name.end(), flag_name.begin(), ::tolower);

            // Match flag name
            bool found = false;
            if (flag_name == "error") {
                value = static_cast <message_box_flags>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(message_box_flags::error));
                found = true;
            }
            if (flag_name == "warning") {
                value = static_cast <message_box_flags>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(message_box_flags::warning));
                found = true;
            }
            if (flag_name == "information") {
                value = static_cast <message_box_flags>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(message_box_flags::information));
                found = true;
            }

            if (!found) {
                // Try to parse as integer
                try {
                    unsigned int int_value = static_cast<unsigned int>(std::stoul(flag_name));
                    value = static_cast <message_box_flags>(static_cast <unsigned int>(value) | int_value);
                } catch (...) {
                    is.setstate(std::ios::failbit);
                    return is;
                }
            }

            if (pos == std::string::npos) break;
            start = pos + 1;
        }

        return is;
    }

    std::ostream& operator<<(std::ostream& os, message_box_button_flags value) {
        // Check if hex output is requested
        if (os.flags() & std::ios::hex) {
            // Output as hex value
            os << static_cast <unsigned int>(value);
            return os;
        }

        // Output as human-readable flag names
        std::vector <std::string> active_flags;

        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(
                 message_box_button_flags::return_key_default)) != 0) {
            active_flags.emplace_back("return_key_default");
        }
        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(
                 message_box_button_flags::escape_key_default)) != 0) {
            active_flags.emplace_back("escape_key_default");
        }

        // Sort flags lexicographically
        std::sort(active_flags.begin(), active_flags.end());

        if (active_flags.empty()) {
            os << "none";
        } else {
            bool first = true;
            for (const auto& flag : active_flags) {
                if (!first) os << " | ";
                os << flag;
                first = false;
            }
        }
        return os;
    }

    std::istream& operator>>(std::istream& is, message_box_button_flags& value) {
        std::string str;
        is >> str;

        value = static_cast <message_box_button_flags>(0);

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <message_box_button_flags>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Check for explicit hex format (0x...)
        if (str.substr(0, 2) == "0x" || str.substr(0, 2) == "0X") {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <message_box_button_flags>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Parse as flag names separated by |
        size_t start = 0;
        size_t pos = 0;

        while (start < str.length()) {
            pos = str.find('|', start);
            std::string flag_name = (pos == std::string::npos) ? str.substr(start) : str.substr(start, pos - start);

            // Trim whitespace
            size_t first = flag_name.find_first_not_of(' ');
            size_t last = flag_name.find_last_not_of(' ');
            if (first != std::string::npos && last != std::string::npos) {
                flag_name = flag_name.substr(first, last - first + 1);
            }

            // Convert to lowercase
            std::transform(flag_name.begin(), flag_name.end(), flag_name.begin(), ::tolower);

            // Match flag name
            bool found = false;
            if (flag_name == "none") {
                value = static_cast <message_box_button_flags>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(message_box_button_flags::none));
                found = true;
            }
            if (flag_name == "return_key_default") {
                value = static_cast <message_box_button_flags>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(
                        message_box_button_flags::return_key_default));
                found = true;
            }
            if (flag_name == "escape_key_default") {
                value = static_cast <message_box_button_flags>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(
                        message_box_button_flags::escape_key_default));
                found = true;
            }

            if (!found) {
                // Try to parse as integer
                try {
                    unsigned int int_value = static_cast<unsigned int>(std::stoul(flag_name));
                    value = static_cast <message_box_button_flags>(static_cast <unsigned int>(value) | int_value);
                } catch (...) {
                    is.setstate(std::ios::failbit);
                    return is;
                }
            }

            if (pos == std::string::npos) break;
            start = pos + 1;
        }

        return is;
    }

    std::ostream& operator<<(std::ostream& os, message_box_color_type value) {
        switch (value) {
            case message_box_color_type::background:
                return os << "background";
            case message_box_color_type::text:
                return os << "text";
            case message_box_color_type::button_border:
                return os << "button_border";
            case message_box_color_type::button_background:
                return os << "button_background";
            case message_box_color_type::button_selected:
                return os << "button_selected";
            case message_box_color_type::max:
                return os << "max";
            default:
                return os << "Unknown_message_box_color_type(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, message_box_color_type& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <message_box_color_type>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "background") {
            value = message_box_color_type::background;
        } else if (str == "text") {
            value = message_box_color_type::text;
        } else if (str == "button_border") {
            value = message_box_color_type::button_border;
        } else if (str == "button_background") {
            value = message_box_color_type::button_background;
        } else if (str == "button_selected") {
            value = message_box_color_type::button_selected;
        } else if (str == "max") {
            value = message_box_color_type::max;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <message_box_color_type>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
