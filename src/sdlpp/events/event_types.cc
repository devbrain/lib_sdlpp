#include <array>
#include <sdlpp/events/event_types.hh>
#include "utils/switch_ostream.hh"

namespace neutrino::sdl {
	BEGIN_IMPL_OUTPUT(event_type)
			case event_type::QUIT: return "QUIT";
			case event_type::APP_TERMINATING: return "APP_TERMINATING";
			case event_type::APP_LOWMEMORY: return "APP_LOWMEMORY";
			case event_type::APP_WILLENTERBACKGROUND: return "APP_WILLENTERBACKGROUND";
			case event_type::APP_DIDENTERBACKGROUND: return "APP_DIDENTERBACKGROUND";
			case event_type::APP_WILLENTERFOREGROUND: return "APP_WILLENTERFOREGROUND";
			case event_type::APP_DIDENTERFOREGROUND: return "APP_DIDENTERFOREGROUND";
			case event_type::WINDOWEVENT: return "WINDOWEVENT";
			case event_type::SYSWMEVENT: return "SYSWMEVENT";
			case event_type::KEYDOWN: return "KEYDOWN";
			case event_type::KEYUP: return "KEYUP";
			case event_type::TEXTEDITING: return "TEXTEDITING";
			case event_type::TEXTINPUT: return "TEXTINPUT";
			case event_type::KEYMAPCHANGED: return "KEYMAPCHANGED";
			case event_type::MOUSEMOTION: return "MOUSEMOTION";
			case event_type::MOUSEBUTTONDOWN: return "MOUSEBUTTONDOWN";
			case event_type::MOUSEBUTTONUP: return "MOUSEBUTTONUP";
			case event_type::MOUSEWHEEL: return "MOUSEWHEEL";
			case event_type::JOYAXISMOTION: return "JOYAXISMOTION";
			case event_type::JOYBALLMOTION: return "JOYBALLMOTION";
			case event_type::JOYHATMOTION: return "JOYHATMOTION";
			case event_type::JOYBUTTONDOWN: return "JOYBUTTONDOWN";
			case event_type::JOYBUTTONUP: return "JOYBUTTONUP";
			case event_type::JOYDEVICEADDED: return "JOYDEVICEADDED";
			case event_type::JOYDEVICEREMOVED: return "JOYDEVICEREMOVED";
			case event_type::CONTROLLERAXISMOTION: return "CONTROLLERAXISMOTION";
			case event_type::CONTROLLERBUTTONDOWN: return "CONTROLLERBUTTONDOWN";
			case event_type::CONTROLLERBUTTONUP: return "CONTROLLERBUTTONUP";
			case event_type::CONTROLLERDEVICEADDED: return "CONTROLLERDEVICEADDED";
			case event_type::CONTROLLERDEVICEREMOVED: return "CONTROLLERDEVICEREMOVED";
			case event_type::CONTROLLERDEVICEREMAPPED: return "CONTROLLERDEVICEREMAPPED";
			case event_type::FINGERDOWN: return "FINGERDOWN";
			case event_type::FINGERUP: return "FINGERUP";
			case event_type::FINGERMOTION: return "FINGERMOTION";
			case event_type::DOLLARGESTURE: return "DOLLARGESTURE";
			case event_type::DOLLARRECORD: return "DOLLARRECORD";
			case event_type::MULTIGESTURE: return "MULTIGESTURE";
			case event_type::CLIPBOARDUPDATE: return "CLIPBOARDUPDATE";
			case event_type::DROPFILE: return "DROPFILE";
			case event_type::DROPTEXT: return "DROPTEXT";
			case event_type::DROPBEGIN: return "DROPBEGIN";
			case event_type::DROPCOMPLETE: return "DROPCOMPLETE";
			case event_type::AUDIODEVICEADDED: return "AUDIODEVICEADDED";
			case event_type::AUDIODEVICEREMOVED: return "AUDIODEVICEREMOVED";
			case event_type::RENDER_TARGETS_RESET: return "RENDER_TARGETS_RESET";
			case event_type::RENDER_DEVICE_RESET: return "RENDER_DEVICE_RESET";
			case event_type::USEREVENT: return "USEREVENT";
	END_IMPL_OUTPUT(event_type)

	BEGIN_IMPL_OUTPUT(event_action)
			case event_action::ADD: return "ADD";
			case event_action::PEEK: return "PEEK";
			case event_action::GET: return "GET";
	END_IMPL_OUTPUT(event_action)

	BEGIN_IMPL_OUTPUT(scancode)
			case scancode::UNKNOWN: return "UNKNOWN";
			case scancode::A: return "A";
			case scancode::B: return "B";
			case scancode::C: return "C";
			case scancode::D: return "D";
			case scancode::E: return "E";
			case scancode::F: return "F";
			case scancode::G: return "G";
			case scancode::H: return "H";
			case scancode::I: return "I";
			case scancode::J: return "J";
			case scancode::K: return "K";
			case scancode::L: return "L";
			case scancode::M: return "M";
			case scancode::N: return "N";
			case scancode::O: return "O";
			case scancode::P: return "P";
			case scancode::Q: return "Q";
			case scancode::R: return "R";
			case scancode::S: return "S";
			case scancode::T: return "T";
			case scancode::U: return "U";
			case scancode::V: return "V";
			case scancode::W: return "W";
			case scancode::X: return "X";
			case scancode::Y: return "Y";
			case scancode::Z: return "Z";
			case scancode::_1: return "_1";
			case scancode::_2: return "_2";
			case scancode::_3: return "_3";
			case scancode::_4: return "_4";
			case scancode::_5: return "_5";
			case scancode::_6: return "_6";
			case scancode::_7: return "_7";
			case scancode::_8: return "_8";
			case scancode::_9: return "_9";
			case scancode::_0: return "_0";
			case scancode::RETURN: return "RETURN";
			case scancode::ESCAPE: return "ESCAPE";
			case scancode::BACKSPACE: return "BACKSPACE";
			case scancode::TAB: return "TAB";
			case scancode::SPACE: return "SPACE";
			case scancode::MINUS: return "MINUS";
			case scancode::EQUALS: return "EQUALS";
			case scancode::LEFTBRACKET: return "LEFTBRACKET";
			case scancode::RIGHTBRACKET: return "RIGHTBRACKET";
			case scancode::BACKSLASH: return "BACKSLASH";
			case scancode::NONUSHASH: return "NONUSHASH";
			case scancode::SEMICOLON: return "SEMICOLON";
			case scancode::APOSTROPHE: return "APOSTROPHE";
			case scancode::GRAVE: return "GRAVE";
			case scancode::COMMA: return "COMMA";
			case scancode::PERIOD: return "PERIOD";
			case scancode::SLASH: return "SLASH";
			case scancode::CAPSLOCK: return "CAPSLOCK";
			case scancode::F1: return "F1";
			case scancode::F2: return "F2";
			case scancode::F3: return "F3";
			case scancode::F4: return "F4";
			case scancode::F5: return "F5";
			case scancode::F6: return "F6";
			case scancode::F7: return "F7";
			case scancode::F8: return "F8";
			case scancode::F9: return "F9";
			case scancode::F10: return "F10";
			case scancode::F11: return "F11";
			case scancode::F12: return "F12";
			case scancode::PRINTSCREEN: return "PRINTSCREEN";
			case scancode::SCROLLLOCK: return "SCROLLLOCK";
			case scancode::PAUSE: return "PAUSE";
			case scancode::INSERT: return "INSERT";
			case scancode::HOME: return "HOME";
			case scancode::PAGEUP: return "PAGEUP";
			case scancode::DEL: return "DEL";
			case scancode::END: return "END";
			case scancode::PAGEDOWN: return "PAGEDOWN";
			case scancode::RIGHT: return "RIGHT";
			case scancode::LEFT: return "LEFT";
			case scancode::DOWN: return "DOWN";
			case scancode::UP: return "UP";
			case scancode::NUMLOCKCLEAR: return "NUMLOCKCLEAR";
			case scancode::KP_DIVIDE: return "KP_DIVIDE";
			case scancode::KP_MULTIPLY: return "KP_MULTIPLY";
			case scancode::KP_MINUS: return "KP_MINUS";
			case scancode::KP_PLUS: return "KP_PLUS";
			case scancode::KP_ENTER: return "KP_ENTER";
			case scancode::KP_1: return "KP_1";
			case scancode::KP_2: return "KP_2";
			case scancode::KP_3: return "KP_3";
			case scancode::KP_4: return "KP_4";
			case scancode::KP_5: return "KP_5";
			case scancode::KP_6: return "KP_6";
			case scancode::KP_7: return "KP_7";
			case scancode::KP_8: return "KP_8";
			case scancode::KP_9: return "KP_9";
			case scancode::KP_0: return "KP_0";
			case scancode::KP_PERIOD: return "KP_PERIOD";
			case scancode::NONUSBACKSLASH: return "NONUSBACKSLASH";
			case scancode::APPLICATION: return "APPLICATION";
			case scancode::POWER: return "POWER";
			case scancode::KP_EQUALS: return "KP_EQUALS";
			case scancode::F13: return "F13";
			case scancode::F14: return "F14";
			case scancode::F15: return "F15";
			case scancode::F16: return "F16";
			case scancode::F17: return "F17";
			case scancode::F18: return "F18";
			case scancode::F19: return "F19";
			case scancode::F20: return "F20";
			case scancode::F21: return "F21";
			case scancode::F22: return "F22";
			case scancode::F23: return "F23";
			case scancode::F24: return "F24";
			case scancode::EXECUTE: return "EXECUTE";
			case scancode::HELP: return "HELP";
			case scancode::MENU: return "MENU";
			case scancode::SELECT: return "SELECT";
			case scancode::STOP: return "STOP";
			case scancode::AGAIN: return "AGAIN";
			case scancode::UNDO: return "UNDO";
			case scancode::CUT: return "CUT";
			case scancode::COPY: return "COPY";
			case scancode::PASTE: return "PASTE";
			case scancode::FIND: return "FIND";
			case scancode::MUTE: return "MUTE";
			case scancode::VOLUMEUP: return "VOLUMEUP";
			case scancode::VOLUMEDOWN: return "VOLUMEDOWN";
			case scancode::KP_COMMA: return "KP_COMMA";
			case scancode::KP_EQUALSAS400: return "KP_EQUALSAS400";
			case scancode::INTERNATIONAL1: return "INTERNATIONAL1";
			case scancode::INTERNATIONAL2: return "INTERNATIONAL2";
			case scancode::INTERNATIONAL3: return "INTERNATIONAL3";
			case scancode::INTERNATIONAL4: return "INTERNATIONAL4";
			case scancode::INTERNATIONAL5: return "INTERNATIONAL5";
			case scancode::INTERNATIONAL6: return "INTERNATIONAL6";
			case scancode::INTERNATIONAL7: return "INTERNATIONAL7";
			case scancode::INTERNATIONAL8: return "INTERNATIONAL8";
			case scancode::INTERNATIONAL9: return "INTERNATIONAL9";
			case scancode::LANG1: return "LANG1";
			case scancode::LANG2: return "LANG2";
			case scancode::LANG3: return "LANG3";
			case scancode::LANG4: return "LANG4";
			case scancode::LANG5: return "LANG5";
			case scancode::LANG6: return "LANG6";
			case scancode::LANG7: return "LANG7";
			case scancode::LANG8: return "LANG8";
			case scancode::LANG9: return "LANG9";
			case scancode::ALTERASE: return "ALTERASE";
			case scancode::SYSREQ: return "SYSREQ";
			case scancode::CANCEL: return "CANCEL";
			case scancode::CLEAR: return "CLEAR";
			case scancode::PRIOR: return "PRIOR";
			case scancode::RETURN2: return "RETURN2";
			case scancode::SEPARATOR: return "SEPARATOR";
			case scancode::KBD_OUT: return "KBD_OUT";
			case scancode::OPER: return "OPER";
			case scancode::CLEARAGAIN: return "CLEARAGAIN";
			case scancode::CRSEL: return "CRSEL";
			case scancode::EXSEL: return "EXSEL";
			case scancode::KP_00: return "KP_00";
			case scancode::KP_000: return "KP_000";
			case scancode::THOUSANDSSEPARATOR: return "THOUSANDSSEPARATOR";
			case scancode::DECIMALSEPARATOR: return "DECIMALSEPARATOR";
			case scancode::CURRENCYUNIT: return "CURRENCYUNIT";
			case scancode::CURRENCYSUBUNIT: return "CURRENCYSUBUNIT";
			case scancode::KP_LEFTPAREN: return "KP_LEFTPAREN";
			case scancode::KP_RIGHTPAREN: return "KP_RIGHTPAREN";
			case scancode::KP_LEFTBRACE: return "KP_LEFTBRACE";
			case scancode::KP_RIGHTBRACE: return "KP_RIGHTBRACE";
			case scancode::KP_TAB: return "KP_TAB";
			case scancode::KP_BACKSPACE: return "KP_BACKSPACE";
			case scancode::KP_A: return "KP_A";
			case scancode::KP_B: return "KP_B";
			case scancode::KP_C: return "KP_C";
			case scancode::KP_D: return "KP_D";
			case scancode::KP_E: return "KP_E";
			case scancode::KP_F: return "KP_F";
			case scancode::KP_XOR: return "KP_XOR";
			case scancode::KP_POWER: return "KP_POWER";
			case scancode::KP_PERCENT: return "KP_PERCENT";
			case scancode::KP_LESS: return "KP_LESS";
			case scancode::KP_GREATER: return "KP_GREATER";
			case scancode::KP_AMPERSAND: return "KP_AMPERSAND";
			case scancode::KP_DBLAMPERSAND: return "KP_DBLAMPERSAND";
			case scancode::KP_VERTICALBAR: return "KP_VERTICALBAR";
			case scancode::KP_DBLVERTICALBAR: return "KP_DBLVERTICALBAR";
			case scancode::KP_COLON: return "KP_COLON";
			case scancode::KP_HASH: return "KP_HASH";
			case scancode::KP_SPACE: return "KP_SPACE";
			case scancode::KP_AT: return "KP_AT";
			case scancode::KP_EXCLAM: return "KP_EXCLAM";
			case scancode::KP_MEMSTORE: return "KP_MEMSTORE";
			case scancode::KP_MEMRECALL: return "KP_MEMRECALL";
			case scancode::KP_MEMCLEAR: return "KP_MEMCLEAR";
			case scancode::KP_MEMADD: return "KP_MEMADD";
			case scancode::KP_MEMSUBTRACT: return "KP_MEMSUBTRACT";
			case scancode::KP_MEMMULTIPLY: return "KP_MEMMULTIPLY";
			case scancode::KP_MEMDIVIDE: return "KP_MEMDIVIDE";
			case scancode::KP_PLUSMINUS: return "KP_PLUSMINUS";
			case scancode::KP_CLEAR: return "KP_CLEAR";
			case scancode::KP_CLEARENTRY: return "KP_CLEARENTRY";
			case scancode::KP_BINARY: return "KP_BINARY";
			case scancode::KP_OCTAL: return "KP_OCTAL";
			case scancode::KP_DECIMAL: return "KP_DECIMAL";
			case scancode::KP_HEXADECIMAL: return "KP_HEXADECIMAL";
			case scancode::LCTRL: return "LCTRL";
			case scancode::LSHIFT: return "LSHIFT";
			case scancode::LALT: return "LALT";
			case scancode::LGUI: return "LGUI";
			case scancode::RCTRL: return "RCTRL";
			case scancode::RSHIFT: return "RSHIFT";
			case scancode::RALT: return "RALT";
			case scancode::RGUI: return "RGUI";
			case scancode::MODE: return "MODE";
			case scancode::AUDIONEXT: return "AUDIONEXT";
			case scancode::AUDIOPREV: return "AUDIOPREV";
			case scancode::AUDIOSTOP: return "AUDIOSTOP";
			case scancode::AUDIOPLAY: return "AUDIOPLAY";
			case scancode::AUDIOMUTE: return "AUDIOMUTE";
			case scancode::MEDIASELECT: return "MEDIASELECT";
			case scancode::WWW: return "WWW";
			case scancode::MAIL: return "MAIL";
			case scancode::CALCULATOR: return "CALCULATOR";
			case scancode::COMPUTER: return "COMPUTER";
			case scancode::AC_SEARCH: return "AC_SEARCH";
			case scancode::AC_HOME: return "AC_HOME";
			case scancode::AC_BACK: return "AC_BACK";
			case scancode::AC_FORWARD: return "AC_FORWARD";
			case scancode::AC_STOP: return "AC_STOP";
			case scancode::AC_REFRESH: return "AC_REFRESH";
			case scancode::AC_BOOKMARKS: return "AC_BOOKMARKS";
			case scancode::BRIGHTNESSDOWN: return "BRIGHTNESSDOWN";
			case scancode::BRIGHTNESSUP: return "BRIGHTNESSUP";
			case scancode::DISPLAYSWITCH: return "DISPLAYSWITCH";
			case scancode::KBDILLUMTOGGLE: return "KBDILLUMTOGGLE";
			case scancode::KBDILLUMDOWN: return "KBDILLUMDOWN";
			case scancode::KBDILLUMUP: return "KBDILLUMUP";
			case scancode::EJECT: return "EJECT";
			case scancode::SLEEP: return "SLEEP";
			case scancode::APP1: return "APP1";
			case scancode::APP2: return "APP2";
			case scancode::NUM_SCANCODES: return "NUM_SCANCODES";
	END_IMPL_OUTPUT(scancode)

	BEGIN_IMPL_OUTPUT(keycode)
			case keycode::UNKNOWN: return "UNKNOWN";
			case keycode::RETURN: return "RETURN";
			case keycode::ESCAPE: return "ESCAPE";
			case keycode::BACKSPACE: return "BACKSPACE";
			case keycode::TAB: return "TAB";
			case keycode::SPACE: return "SPACE";
			case keycode::EXCLAIM: return "EXCLAIM";
			case keycode::QUOTEDBL: return "QUOTEDBL";
			case keycode::PERCENT: return "PERCENT";
			case keycode::DOLLAR: return "DOLLAR";
			case keycode::AMPERSAND: return "AMPERSAND";
			case keycode::QUOTE: return "QUOTE";
			case keycode::LEFTPAREN: return "LEFTPAREN";
			case keycode::RIGHTPAREN: return "RIGHTPAREN";
			case keycode::ASTERISK: return "ASTERISK";
			case keycode::PLUS: return "PLUS";
			case keycode::COMMA: return "COMMA";
			case keycode::MINUS: return "MINUS";
			case keycode::PERIOD: return "PERIOD";
			case keycode::SLASH: return "SLASH";
			case keycode::_0: return "_0";
			case keycode::_1: return "_1";
			case keycode::_2: return "_2";
			case keycode::_3: return "_3";
			case keycode::_4: return "_4";
			case keycode::_5: return "_5";
			case keycode::_6: return "_6";
			case keycode::_7: return "_7";
			case keycode::_8: return "_8";
			case keycode::_9: return "_9";
			case keycode::COLON: return "COLON";
			case keycode::SEMICOLON: return "SEMICOLON";
			case keycode::LESS: return "LESS";
			case keycode::EQUALS: return "EQUALS";
			case keycode::GREATER: return "GREATER";
			case keycode::QUESTION: return "QUESTION";
			case keycode::AT: return "AT";
			case keycode::LEFTBRACKET: return "LEFTBRACKET";
			case keycode::BACKSLASH: return "BACKSLASH";
			case keycode::RIGHTBRACKET: return "RIGHTBRACKET";
			case keycode::CARET: return "CARET";
			case keycode::UNDERSCORE: return "UNDERSCORE";
			case keycode::BACKQUOTE: return "BACKQUOTE";
			case keycode::a: return "a";
			case keycode::b: return "b";
			case keycode::c: return "c";
			case keycode::d: return "d";
			case keycode::e: return "e";
			case keycode::f: return "f";
			case keycode::g: return "g";
			case keycode::h: return "h";
			case keycode::i: return "i";
			case keycode::j: return "j";
			case keycode::k: return "k";
			case keycode::l: return "l";
			case keycode::m: return "m";
			case keycode::n: return "n";
			case keycode::o: return "o";
			case keycode::p: return "p";
			case keycode::q: return "q";
			case keycode::r: return "r";
			case keycode::s: return "s";
			case keycode::t: return "t";
			case keycode::u: return "u";
			case keycode::v: return "v";
			case keycode::w: return "w";
			case keycode::x: return "x";
			case keycode::y: return "y";
			case keycode::z: return "z";
			case keycode::CAPSLOCK: return "CAPSLOCK";
			case keycode::F1: return "F1";
			case keycode::F2: return "F2";
			case keycode::F3: return "F3";
			case keycode::F4: return "F4";
			case keycode::F5: return "F5";
			case keycode::F6: return "F6";
			case keycode::F7: return "F7";
			case keycode::F8: return "F8";
			case keycode::F9: return "F9";
			case keycode::F10: return "F10";
			case keycode::F11: return "F11";
			case keycode::F12: return "F12";
			case keycode::PRINTSCREEN: return "PRINTSCREEN";
			case keycode::SCROLLLOCK: return "SCROLLLOCK";
			case keycode::PAUSE: return "PAUSE";
			case keycode::INSERT: return "INSERT";
			case keycode::HOME: return "HOME";
			case keycode::PAGEUP: return "PAGEUP";
			case keycode::DEL: return "DEL";
			case keycode::END: return "END";
			case keycode::PAGEDOWN: return "PAGEDOWN";
			case keycode::RIGHT: return "RIGHT";
			case keycode::LEFT: return "LEFT";
			case keycode::DOWN: return "DOWN";
			case keycode::UP: return "UP";
			case keycode::NUMLOCKCLEAR: return "NUMLOCKCLEAR";
			case keycode::KP_DIVIDE: return "KP_DIVIDE";
			case keycode::KP_MULTIPLY: return "KP_MULTIPLY";
			case keycode::KP_MINUS: return "KP_MINUS";
			case keycode::KP_PLUS: return "KP_PLUS";
			case keycode::KP_ENTER: return "KP_ENTER";
			case keycode::KP_1: return "KP_1";
			case keycode::KP_2: return "KP_2";
			case keycode::KP_3: return "KP_3";
			case keycode::KP_4: return "KP_4";
			case keycode::KP_5: return "KP_5";
			case keycode::KP_6: return "KP_6";
			case keycode::KP_7: return "KP_7";
			case keycode::KP_8: return "KP_8";
			case keycode::KP_9: return "KP_9";
			case keycode::KP_0: return "KP_0";
			case keycode::KP_PERIOD: return "KP_PERIOD";
			case keycode::APPLICATION: return "APPLICATION";
			case keycode::POWER: return "POWER";
			case keycode::KP_EQUALS: return "KP_EQUALS";
			case keycode::F13: return "F13";
			case keycode::F14: return "F14";
			case keycode::F15: return "F15";
			case keycode::F16: return "F16";
			case keycode::F17: return "F17";
			case keycode::F18: return "F18";
			case keycode::F19: return "F19";
			case keycode::F20: return "F20";
			case keycode::F21: return "F21";
			case keycode::F22: return "F22";
			case keycode::F23: return "F23";
			case keycode::F24: return "F24";
			case keycode::EXECUTE: return "EXECUTE";
			case keycode::HELP: return "HELP";
			case keycode::MENU: return "MENU";
			case keycode::SELECT: return "SELECT";
			case keycode::STOP: return "STOP";
			case keycode::AGAIN: return "AGAIN";
			case keycode::UNDO: return "UNDO";
			case keycode::CUT: return "CUT";
			case keycode::COPY: return "COPY";
			case keycode::PASTE: return "PASTE";
			case keycode::FIND: return "FIND";
			case keycode::MUTE: return "MUTE";
			case keycode::VOLUMEUP: return "VOLUMEUP";
			case keycode::VOLUMEDOWN: return "VOLUMEDOWN";
			case keycode::KP_COMMA: return "KP_COMMA";
			case keycode::KP_EQUALSAS400: return "KP_EQUALSAS400";
			case keycode::ALTERASE: return "ALTERASE";
			case keycode::SYSREQ: return "SYSREQ";
			case keycode::CANCEL: return "CANCEL";
			case keycode::CLEAR: return "CLEAR";
			case keycode::PRIOR: return "PRIOR";
			case keycode::RETURN2: return "RETURN2";
			case keycode::SEPARATOR: return "SEPARATOR";
			case keycode::KBD_OUT: return "KBD_OUT";
			case keycode::OPER: return "OPER";
			case keycode::CLEARAGAIN: return "CLEARAGAIN";
			case keycode::CRSEL: return "CRSEL";
			case keycode::EXSEL: return "EXSEL";
			case keycode::KP_00: return "KP_00";
			case keycode::KP_000: return "KP_000";
			case keycode::THOUSANDSSEPARATOR: return "THOUSANDSSEPARATOR";
			case keycode::DECIMALSEPARATOR: return "DECIMALSEPARATOR";
			case keycode::CURRENCYUNIT: return "CURRENCYUNIT";
			case keycode::CURRENCYSUBUNIT: return "CURRENCYSUBUNIT";
			case keycode::KP_LEFTPAREN: return "KP_LEFTPAREN";
			case keycode::KP_RIGHTPAREN: return "KP_RIGHTPAREN";
			case keycode::KP_LEFTBRACE: return "KP_LEFTBRACE";
			case keycode::KP_RIGHTBRACE: return "KP_RIGHTBRACE";
			case keycode::KP_TAB: return "KP_TAB";
			case keycode::KP_BACKSPACE: return "KP_BACKSPACE";
			case keycode::KP_A: return "KP_A";
			case keycode::KP_B: return "KP_B";
			case keycode::KP_C: return "KP_C";
			case keycode::KP_D: return "KP_D";
			case keycode::KP_E: return "KP_E";
			case keycode::KP_F: return "KP_F";
			case keycode::KP_XOR: return "KP_XOR";
			case keycode::KP_POWER: return "KP_POWER";
			case keycode::KP_PERCENT: return "KP_PERCENT";
			case keycode::KP_LESS: return "KP_LESS";
			case keycode::KP_GREATER: return "KP_GREATER";
			case keycode::KP_AMPERSAND: return "KP_AMPERSAND";
			case keycode::KP_DBLAMPERSAND: return "KP_DBLAMPERSAND";
			case keycode::KP_VERTICALBAR: return "KP_VERTICALBAR";
			case keycode::KP_DBLVERTICALBAR: return "KP_DBLVERTICALBAR";
			case keycode::KP_COLON: return "KP_COLON";
			case keycode::KP_HASH: return "KP_HASH";
			case keycode::KP_SPACE: return "KP_SPACE";
			case keycode::KP_AT: return "KP_AT";
			case keycode::KP_EXCLAM: return "KP_EXCLAM";
			case keycode::KP_MEMSTORE: return "KP_MEMSTORE";
			case keycode::KP_MEMRECALL: return "KP_MEMRECALL";
			case keycode::KP_MEMCLEAR: return "KP_MEMCLEAR";
			case keycode::KP_MEMADD: return "KP_MEMADD";
			case keycode::KP_MEMSUBTRACT: return "KP_MEMSUBTRACT";
			case keycode::KP_MEMMULTIPLY: return "KP_MEMMULTIPLY";
			case keycode::KP_MEMDIVIDE: return "KP_MEMDIVIDE";
			case keycode::KP_PLUSMINUS: return "KP_PLUSMINUS";
			case keycode::KP_CLEAR: return "KP_CLEAR";
			case keycode::KP_CLEARENTRY: return "KP_CLEARENTRY";
			case keycode::KP_BINARY: return "KP_BINARY";
			case keycode::KP_OCTAL: return "KP_OCTAL";
			case keycode::KP_DECIMAL: return "KP_DECIMAL";
			case keycode::KP_HEXADECIMAL: return "KP_HEXADECIMAL";
			case keycode::LCTRL: return "LCTRL";
			case keycode::LSHIFT: return "LSHIFT";
			case keycode::LALT: return "LALT";
			case keycode::LGUI: return "LGUI";
			case keycode::RCTRL: return "RCTRL";
			case keycode::RSHIFT: return "RSHIFT";
			case keycode::RALT: return "RALT";
			case keycode::RGUI: return "RGUI";
			case keycode::MODE: return "MODE";
			case keycode::AUDIONEXT: return "AUDIONEXT";
			case keycode::AUDIOPREV: return "AUDIOPREV";
			case keycode::AUDIOSTOP: return "AUDIOSTOP";
			case keycode::AUDIOPLAY: return "AUDIOPLAY";
			case keycode::AUDIOMUTE: return "AUDIOMUTE";
			case keycode::MEDIASELECT: return "MEDIASELECT";
			case keycode::WWW: return "WWW";
			case keycode::MAIL: return "MAIL";
			case keycode::CALCULATOR: return "CALCULATOR";
			case keycode::COMPUTER: return "COMPUTER";
			case keycode::AC_SEARCH: return "AC_SEARCH";
			case keycode::AC_HOME: return "AC_HOME";
			case keycode::AC_BACK: return "AC_BACK";
			case keycode::AC_FORWARD: return "AC_FORWARD";
			case keycode::AC_STOP: return "AC_STOP";
			case keycode::AC_REFRESH: return "AC_REFRESH";
			case keycode::AC_BOOKMARKS: return "AC_BOOKMARKS";
			case keycode::BRIGHTNESSDOWN: return "BRIGHTNESSDOWN";
			case keycode::BRIGHTNESSUP: return "BRIGHTNESSUP";
			case keycode::DISPLAYSWITCH: return "DISPLAYSWITCH";
			case keycode::KBDILLUMTOGGLE: return "KBDILLUMTOGGLE";
			case keycode::KBDILLUMDOWN: return "KBDILLUMDOWN";
			case keycode::KBDILLUMUP: return "KBDILLUMUP";
			case keycode::EJECT: return "EJECT";
			case keycode::SLEEP: return "SLEEP";
	END_IMPL_OUTPUT(keycode)

	std::string to_string (keymod t) {
		static std::array<uint16_t, 12> mask = {
			KMOD_LSHIFT,
			KMOD_RSHIFT,
			KMOD_LCTRL,
			KMOD_RCTRL,
			KMOD_LALT,
			KMOD_RALT,
			KMOD_LGUI,
			KMOD_RGUI,
			KMOD_NUM,
			KMOD_CAPS,
			KMOD_MODE,
			KMOD_SCROLL,
		};

		static std::array<const char*, 12> names = {
			"LSHIFT",
			"RSHIFT",
			"LCTRL",
			"RCTRL",
			"LALT",
			"RALT",
			"LGUI",
			"RGUI",
			"NUM ",
			"CAPS",
			"MODE",
			"SCROLL",
		};
		std::string out;
		auto v = (uint16_t)t;
		bool first = true;
		for (auto i = 0u; i < mask.size (); i++) {
			if ((v & mask[i]) == mask[i]) {
				if (first) {
					first = false;
				} else {
					out += '|';
				}
				out += names[i];
			}
		}
		return out;
	}

	std::ostream& operator<< (std::ostream& os, keymod t) {
		os << to_string (t);
		return os;
	}
}