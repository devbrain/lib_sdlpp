/**
 * @file process.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/system/process.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, process_io value) {
        switch (value) {
            case process_io::inherited:
                return os << "inherited";
            case process_io::null:
                return os << "null";
            case process_io::app:
                return os << "app";
            case process_io::redirect:
                return os << "redirect";
            default:
                return os << "Unknown_process_io(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, process_io& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <process_io>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "inherited") {
            value = process_io::inherited;
        } else if (str == "null") {
            value = process_io::null;
        } else if (str == "app") {
            value = process_io::app;
        } else if (str == "redirect") {
            value = process_io::redirect;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <process_io>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
