/**
 * @file platform.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/system/platform.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>
#include <vector>

namespace sdlpp::android {
    std::ostream& operator<<(std::ostream& os, external_storage_state value) {
        // Check if hex output is requested
        if (os.flags() & std::ios::hex) {
            // Output as hex value
            os << static_cast <unsigned int>(value);
            return os;
        }

        // Output as human-readable flag names
        std::vector <std::string> active_flags;

        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(external_storage_state::read)) != 0) {
            active_flags.emplace_back("read");
        }
        if ((static_cast <unsigned int>(value) & static_cast <unsigned int>(external_storage_state::write)) != 0) {
            active_flags.emplace_back("write");
        }

        // Sort flags lexicographically
        std::sort(active_flags.begin(), active_flags.end());

        if (active_flags.empty()) {
            os << "none";
        } else {
            bool first = true;
            for (const auto& flag : active_flags) {
                if (!first) os << " | ";
                os << flag;
                first = false;
            }
        }
        return os;
    }

    std::istream& operator>>(std::istream& is, external_storage_state& value) {
        std::string str;
        is >> str;

        value = static_cast <external_storage_state>(0);

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <external_storage_state>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Check for explicit hex format (0x...)
        if (str.substr(0, 2) == "0x" || str.substr(0, 2) == "0X") {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <external_storage_state>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Parse as flag names separated by |
        size_t start = 0;
        size_t pos = 0;

        while (start < str.length()) {
            pos = str.find('|', start);
            std::string flag_name = (pos == std::string::npos) ? str.substr(start) : str.substr(start, pos - start);

            // Trim whitespace
            size_t first = flag_name.find_first_not_of(' ');
            size_t last = flag_name.find_last_not_of(' ');
            if (first != std::string::npos && last != std::string::npos) {
                flag_name = flag_name.substr(first, last - first + 1);
            }

            // Convert to lowercase
            std::transform(flag_name.begin(), flag_name.end(), flag_name.begin(), ::tolower);

            // Match flag name
            bool found = false;
            if (flag_name == "read") {
                value = static_cast <external_storage_state>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(external_storage_state::read));
                found = true;
            }
            if (flag_name == "write") {
                value = static_cast <external_storage_state>(
                    static_cast <unsigned int>(value) | static_cast <unsigned int>(external_storage_state::write));
                found = true;
            }

            if (!found) {
                // Try to parse as integer
                try {
                    unsigned int int_value = static_cast<unsigned int>(std::stoul(flag_name));
                    value = static_cast <external_storage_state>(static_cast <unsigned int>(value) | int_value);
                } catch (...) {
                    is.setstate(std::ios::failbit);
                    return is;
                }
            }

            if (pos == std::string::npos) break;
            start = pos + 1;
        }

        return is;
    }
} // namespace

namespace sdlpp::directories {
    std::ostream& operator<<(std::ostream& os, folder_type value) {
        switch (value) {
            case folder_type::home:
                return os << "home";
            case folder_type::desktop:
                return os << "desktop";
            case folder_type::documents:
                return os << "documents";
            case folder_type::downloads:
                return os << "downloads";
            case folder_type::music:
                return os << "music";
            case folder_type::pictures:
                return os << "pictures";
            case folder_type::publicshare:
                return os << "publicshare";
            case folder_type::savedgames:
                return os << "savedgames";
            case folder_type::screenshots:
                return os << "screenshots";
            case folder_type::templates:
                return os << "templates";
            case folder_type::videos:
                return os << "videos";
            default:
                return os << "Unknown_folder_type(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, folder_type& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <folder_type>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "home") {
            value = folder_type::home;
        } else if (str == "desktop") {
            value = folder_type::desktop;
        } else if (str == "documents") {
            value = folder_type::documents;
        } else if (str == "downloads") {
            value = folder_type::downloads;
        } else if (str == "music") {
            value = folder_type::music;
        } else if (str == "pictures") {
            value = folder_type::pictures;
        } else if (str == "publicshare") {
            value = folder_type::publicshare;
        } else if (str == "savedgames") {
            value = folder_type::savedgames;
        } else if (str == "screenshots") {
            value = folder_type::screenshots;
        } else if (str == "templates") {
            value = folder_type::templates;
        } else if (str == "videos") {
            value = folder_type::videos;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <folder_type>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace

namespace sdlpp::platform {
    std::ostream& operator<<(std::ostream& os, platform_category value) {
        switch (value) {
            case platform_category::desktop:
                return os << "desktop";
            case platform_category::mobile:
                return os << "mobile";
            case platform_category::web:
                return os << "web";
            case platform_category::console:
                return os << "console";
            case platform_category::embedded:
                return os << "embedded";
            case platform_category::unknown:
                return os << "unknown";
            default:
                return os << "Unknown_platform_category(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, platform_category& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <platform_category>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "desktop") {
            value = platform_category::desktop;
        } else if (str == "mobile") {
            value = platform_category::mobile;
        } else if (str == "web") {
            value = platform_category::web;
        } else if (str == "console") {
            value = platform_category::console;
        } else if (str == "embedded") {
            value = platform_category::embedded;
        } else if (str == "unknown") {
            value = platform_category::unknown;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <platform_category>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace

