/**
 * @file async_io.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/io/async_io.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, async_io_result value) {
        switch (value) {
            case async_io_result::complete:
                return os << "complete";
            case async_io_result::error:
                return os << "error";
            case async_io_result::canceled:
                return os << "canceled";
            default:
                return os << "Unknown_async_io_result(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, async_io_result& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <async_io_result>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "complete") {
            value = async_io_result::complete;
        } else if (str == "error") {
            value = async_io_result::error;
        } else if (str == "canceled") {
            value = async_io_result::canceled;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <async_io_result>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }

    std::ostream& operator<<(std::ostream& os, async_io_task_type value) {
        switch (value) {
            case async_io_task_type::read:
                return os << "read";
            case async_io_task_type::write:
                return os << "write";
            case async_io_task_type::close:
                return os << "close";
            default:
                return os << "Unknown_async_io_task_type(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, async_io_task_type& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <async_io_task_type>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "read") {
            value = async_io_task_type::read;
        } else if (str == "write") {
            value = async_io_task_type::write;
        } else if (str == "close") {
            value = async_io_task_type::close;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <async_io_task_type>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
