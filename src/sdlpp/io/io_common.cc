/**
 * @file io_common.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/io/io_common.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, file_mode value) {
        switch (value) {
            case file_mode::read:
                return os << "read";
            case file_mode::write:
                return os << "write";
            case file_mode::append:
                return os << "append";
            case file_mode::read_update:
                return os << "read_update";
            case file_mode::write_update:
                return os << "write_update";
            case file_mode::append_update:
                return os << "append_update";
            case file_mode::read_binary:
                return os << "read_binary";
            case file_mode::write_binary:
                return os << "write_binary";
            case file_mode::append_binary:
                return os << "append_binary";
            case file_mode::read_update_binary:
                return os << "read_update_binary";
            case file_mode::write_update_binary:
                return os << "write_update_binary";
            case file_mode::append_update_binary:
                return os << "append_update_binary";
            default:
                return os << "Unknown_file_mode(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, file_mode& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <file_mode>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "read") {
            value = file_mode::read;
        } else if (str == "write") {
            value = file_mode::write;
        } else if (str == "append") {
            value = file_mode::append;
        } else if (str == "read_update") {
            value = file_mode::read_update;
        } else if (str == "write_update") {
            value = file_mode::write_update;
        } else if (str == "append_update") {
            value = file_mode::append_update;
        } else if (str == "read_binary") {
            value = file_mode::read_binary;
        } else if (str == "write_binary") {
            value = file_mode::write_binary;
        } else if (str == "append_binary") {
            value = file_mode::append_binary;
        } else if (str == "read_update_binary") {
            value = file_mode::read_update_binary;
        } else if (str == "write_update_binary") {
            value = file_mode::write_update_binary;
        } else if (str == "append_update_binary") {
            value = file_mode::append_update_binary;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <file_mode>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
