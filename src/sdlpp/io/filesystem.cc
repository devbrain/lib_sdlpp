/**
 * @file filesystem.cc
 * @brief Stream operator implementations for enums
 * @note This file is auto-generated by generate_enum_operators.py
 */

#include <sdlpp/io/filesystem.hh>
#include <iostream>
#include <string>
#include <algorithm>
#include <cctype>

namespace sdlpp {
    std::ostream& operator<<(std::ostream& os, folder_type value) {
        switch (value) {
            case folder_type::home:
                return os << "home";
            case folder_type::desktop:
                return os << "desktop";
            case folder_type::documents:
                return os << "documents";
            case folder_type::downloads:
                return os << "downloads";
            case folder_type::music:
                return os << "music";
            case folder_type::pictures:
                return os << "pictures";
            case folder_type::publicshare:
                return os << "publicshare";
            case folder_type::savedgames:
                return os << "savedgames";
            case folder_type::screenshots:
                return os << "screenshots";
            case folder_type::templates:
                return os << "templates";
            case folder_type::videos:
                return os << "videos";
            default:
                return os << "Unknown_folder_type(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, folder_type& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <folder_type>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "home") {
            value = folder_type::home;
        } else if (str == "desktop") {
            value = folder_type::desktop;
        } else if (str == "documents") {
            value = folder_type::documents;
        } else if (str == "downloads") {
            value = folder_type::downloads;
        } else if (str == "music") {
            value = folder_type::music;
        } else if (str == "pictures") {
            value = folder_type::pictures;
        } else if (str == "publicshare") {
            value = folder_type::publicshare;
        } else if (str == "savedgames") {
            value = folder_type::savedgames;
        } else if (str == "screenshots") {
            value = folder_type::screenshots;
        } else if (str == "templates") {
            value = folder_type::templates;
        } else if (str == "videos") {
            value = folder_type::videos;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <folder_type>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }

    std::ostream& operator<<(std::ostream& os, path_type value) {
        switch (value) {
            case path_type::none:
                return os << "none";
            case path_type::file:
                return os << "file";
            case path_type::directory:
                return os << "directory";
            case path_type::other:
                return os << "other";
            default:
                return os << "Unknown_path_type(" << static_cast <int>(value) << ")";
        }
    }

    std::istream& operator>>(std::istream& is, path_type& value) {
        std::string str;
        is >> str;

        // Check if hex input is expected based on stream flags
        if (is.flags() & std::ios::hex) {
            try {
                unsigned int int_value = static_cast<unsigned int>(std::stoul(str, nullptr, 16));
                value = static_cast <path_type>(int_value);
                return is;
            } catch (...) {
                is.setstate(std::ios::failbit);
                return is;
            }
        }

        // Convert to lowercase for case-insensitive comparison
        std::transform(str.begin(), str.end(), str.begin(), ::tolower);

        if (str == "none") {
            value = path_type::none;
        } else if (str == "file") {
            value = path_type::file;
        } else if (str == "directory") {
            value = path_type::directory;
        } else if (str == "other") {
            value = path_type::other;
        } else {
            // Try to parse as integer
            try {
                int int_value = std::stoi(str);
                value = static_cast <path_type>(int_value);
            } catch (...) {
                is.setstate(std::ios::failbit);
            }
        }

        return is;
    }
} // namespace
